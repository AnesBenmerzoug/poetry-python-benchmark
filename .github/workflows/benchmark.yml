name: benchmark

on:
  push:
    branches:
      - main
  schedule:
    # At 18:00 on Monday
    # https://crontab.guru/#0_18_*_*_1
    - cron:  '0 18 * * 1'
  workflow_dispatch:

concurrency:
  group: benchmark

defaults:
  run:
    shell: bash

env:
  POETRY_VERSION: 1.8.4
  PIPX_VERSION: 1.7.1
  MAX_RUNS: 20

jobs:
  benchmark:
    name: Run Poetry Benchmarks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.11", "3.12", "3.13", "3.13t"]
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install python build tools
        # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
          libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
          libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev ffmpeg

      - name: Install pyenv, python and poetry
        run: |
          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
          PYENV_ROOT="$HOME/.pyenv"
          PYENV_BIN="$PYENV_ROOT/bin"
          export PATH="$PYENV_BIN:$PATH"
          echo "$PYENV_BIN" >> $GITHUB_PATH
          echo "PYENV_ROOT=$PYENV_ROOT" >> $GITHUB_ENV
          eval "$(pyenv init -)"
          pyenv --version

          # Install Python and set it as default
          pyenv install --skip-existing ${{ matrix.python_version }}
          pyenv global ${{ matrix.python_version }}
          python -VV

          # Install Poetry and add it to PATH
          pip install pipx==${{ env.PIPX_VERSION }}
          python -m pipx ensurepath
          pipx install --verbose  poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
          POETRY_BIN="${HOME}/.poetry/bin"
          echo "$POETRY_BIN" >> $GITHUB_PATH
          
      - name: Install hyperfine
        run: |
          wget https://github.com/sharkdp/hyperfine/releases/download/v1.18.0/hyperfine_1.18.0_amd64.deb
          sudo apt install ./hyperfine_1.18.0_amd64.deb

      - name: Import Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          # We use --lock to only update the lock file without installing the packages
          hyperfine --command-name=import \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --show-output \
            --export-json=import_${{ matrix.python_version }}.json \
            --prepare 'git restore . && rm -f poetry.lock' \
            'poetry add --lock --no-cache $(cat requirements.txt | sed -e "s/#.*//" -e "/^$$/ d" | tr "\n" " ")'

      - name: Lock without Cache Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=lock-without-cache \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --show-output \
            --export-json=lock_without_cache_${{ matrix.python_version }}.json \
            --prepare 'rm -rf ~/.cache/pip && rm -rf .venv && rm -f poetry.lock' \
            'poetry lock --no-cache'
      
      - name: Lock with Cache Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=lock-with-cache \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --warmup=3 --show-output \
            --export-json=lock_with_cache_${{ matrix.python_version }}.json  \
            --prepare 'rm -f poetry.lock' \
            'poetry lock'

      - name: Install without Cache Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=install-without-cache \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --show-output \
            --export-json=install_without_cache_${{ matrix.python_version }}.json \
            --prepare 'rm -rf ~/.cache/pip && rm -rf .venv' \
            'poetry install --no-cache'

      - name: Install with Cache Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=install-with-cache \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --warmup=3 --show-output \
            --export-json=install_with_cache_${{ matrix.python_version }}.json \
            --prepare 'rm -rf .venv' \
            'poetry install'

      - name: Update without Cache Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=update-without-cache \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --show-output \
            --export-json=update_without_cache_${{ matrix.python_version }}.json \
            --prepare 'rm -f poetry.lock && poetry lock --no-update && poetry install --sync && rm -rf ~/.cache/pip' \
            'poetry update --no-cache'

      - name: Update with Cache Operation
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=update-with-cache \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --warmup=3 --show-output \
            --export-json=update_with_cache_${{ matrix.python_version }}.json \
            --prepare 'rm -f poetry.lock && poetry lock --no-update &&  poetry install --sync' \
            'poetry update'

      - name: Add package
        run: |
          eval "$(pyenv init -)"
          python -V
          hyperfine --command-name=add-package \
            --parameter-list python_version ${{ matrix.python_version }} \
            --max-runs=${{ env.MAX_RUNS }} --show-output \
            --export-json=add_package_${{ matrix.python_version }}.json \
            --prepare 'rm -f poetry.lock && poetry lock --no-update && poetry install --sync && rm -rf ~/.cache/pip' \
            --cleanup 'poetry remove numpy' \
            'poetry add --no-cache numpy'

      - uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: benchmark-stats-${{ matrix.python_version }}
          path: '*.json'
          if-no-files-found: error
          overwrite: true
          retention-days: 10
  
  plot:
    name: Collect and Plot Benchmark Results
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [benchmark]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with: 
          pattern: 'benchmark-stats-*'
          merge-multiple: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Combine Results
        run: |
          python scripts/combine_benchmark_results.py

      - uses: actions/upload-artifact@v4
        with:
          name: combined-benchmark-stats
          path: combined_stats.json
          if-no-files-found: error
          overwrite: true
          retention-days: 10

      - name: Install pipx
        uses: CfirTsabari/actions-pipx@v1
        with:
          pipx-version: ${{ env.PIPX_VERSION }}

      - name: Plot Results
        run: pipx run scripts/plot_benchmark_results.py

      - uses: actions/upload-artifact@v4
        with:
          name: benchmark-plots
          path: '*.png'
          if-no-files-found: error
          overwrite: true
          retention-days: 10
      